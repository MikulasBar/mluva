name: Release

on:
  push:
    tags:
      - 'v*.*.*'
    
permissions:
  contents: write
  packages: write
  actions: read

env:
  RUSTFLAGS: "-C target-cpu=native"

jobs:
  ci:
    name: CI
    uses: ./.github/workflows/ci.yaml

  build:
    name: Build CLI (matrix)
    needs: ci
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache cargo registry & target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Build release
        run: cargo build -p cli --release

      - name: Prepare dist dir (unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          mkdir -p dist/bin
          cp target/release/cli dist/bin/mluva
          chmod +x dist/bin/mluva || true

      - name: Prepare dist dir (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path dist\bin -Force | Out-Null
          Copy-Item target\release\cli.exe dist\bin\mluva.exe -Force

      - name: Archive artifact (unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: tar -czf release-${{ matrix.os }}.tar.gz -C dist .

      - name: Archive artifact (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: Compress-Archive -Path dist\* -DestinationPath release-${{ matrix.os }}.zip -Force

      - name: Upload build artifact (unix)
        if: ${{ matrix.os != 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: release-${{ matrix.os }}.tar.gz

      - name: Upload build artifact (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: release-${{ matrix.os }}.zip

  # Publish GitHub Release and attach artifacts
  publish:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download ubuntu artifact
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: release-ubuntu-latest
          path: artifacts/ubuntu

      - name: Download macos artifact
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: release-macos-latest
          path: artifacts/macos

      - name: Download windows artifact
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: release-windows-latest
          path: artifacts/windows

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            artifacts/ubuntu/release-ubuntu-latest.tar.gz
            artifacts/macos/release-macos-latest.tar.gz
            artifacts/windows/release-windows-latest.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}